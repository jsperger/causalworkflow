% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit-staged-workflow.R
\name{fit_next_stage}
\alias{fit_next_stage}
\title{Fit the next stage of a \code{staged_workflow}}
\usage{
fit_next_stage(object, data, ..., discount = 1, control = control_fit())
}
\arguments{
\item{object}{A \code{\link[=staged_workflow]{staged_workflow()}} object.}

\item{data}{A data frame containing all necessary variables for all stages.}

\item{...}{Not used.}

\item{discount}{A numeric value between 0 and 1 for discounting future
outcomes. Defaults to 1 (no discounting).}

\item{control}{A \code{control_fit} object to manage the fitting process.}
}
\value{
A \code{fitted_staged_workflow} object with one additional stage fitted.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

This function fits the next sequential model in a \code{staged_workflow} object.
It is a valuable tool for debugging and for manually stepping through the
backwards recursive fitting process.
}
\details{
Given a \code{staged_workflow} that may be partially fitted, this function
identifies the next stage that needs to be fitted (the highest-numbered
unfitted stage) and fits only that single stage. It uses the same recursive
engine as \code{fit.staged_workflow()}, but instructs it to stop after one
iteration.

For example, if you have a 4-stage workflow where stages 4 and 3 are already
fitted, calling \code{fit_next_stage()} will fit stage 2 and return the updated
object with stages 4, 3, and 2 fitted.
}
